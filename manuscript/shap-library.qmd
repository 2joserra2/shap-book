# The SHAP Library

A few notes on the SHAP library, which I used throughout this book.
Choosing to use it was not an easy decision.
tl;dr: It's a great library, but issues are accumulating and the future development situation is unclear.

The SHAP library was written by Scott Lundberg, author of the SHAP paper [@lundberg2017unified] and many other SHAP-related papers.
The [first commit](https://github.com/slundberg/shap/tree/7673c7d0e147c1f9d3942b32ca2c0ba93fd37875) was on November 22nd, 2016.
At the time of writing, there are over 2000 commits.

## The SHAP library is popular

The SHAP package is open source and hosted on Github, making it public and allowing everyone to track its progress.
The repository has been starred over 19k times and forked nearly 3k times.
Feature-wise, it's the most comprehensive library available for Shapley values.
I believe the `shap` library is the most widely-used implementation of Shapley values in machine learning.

## The SHAP library has many issues

As of the date of writing, the `shap` library requires maintenance.
Here is a list of the package's current state:

- The [latest commit](https://github.com/slundberg/shap/commit/45b85c1837283fdaeed7440ec6365a886af4a333) was on June 16th, 2022 -- almost a year without any activity as of the time of writing.
- Lack of commits is not necessarily an issue; however, there are also 1.6k unresolved issues and nearly 100 pull requests, indicating a demand for code changes and improvements from the community.
- Many of the issues are questions, but this also implies that issue triage is not happening at the moment.
- Additionally, there are several smaller concerns: failing tests, outdated README, non-functional example notebooks, etc.
- For instance, the example in the README no longer works due to the deprecation of the Boston dataset.

In summary, the library has numerous issues.

## Open source is challenging

As a package developer myself, I understand the difficulties.
I created an [R package called iml](https://github.com/christophM/iml), and I must admit, I'm not the best maintainer.
The only reason I'm not in the same situation as with the `shap` package is that `iml` isn't as popular.

Essentially, the situation is this:
Whenever someone opens an issue for the `iml` package, I face a decision.
Do I work on that issue or focus on my main job, which is writing books?
Writing books is what I enjoy and what supports me financially.

I've found that working on open-source code projects can be rather thankless:
You don't get paid, and you often only see the negative aspects of the package, as people usually write when it doesn't work.
Moreover, there's a significant opportunity cost when working on the package, as that time could be spent on other activities, like writing, cooking, or spending time with friends.

Regarding `shap`, I don't know what Scott Lundberg's plans are for the package.
I highlighted the issues with the `shap` package because it's relevant for you to make an informed decision about whether to work with it or not.
My intention is not to criticize Lundberg.
He has generously contributed his time and effort to bring the `shap` package to life and owes no further development or maintenance to anyone.
In fact, I'm grateful for what he has accomplished with the package so far.

## Addressing the situation

Assuming Scott Lundberg doesn't return to work on `shap`, the situation may evolve in several ways.
Ideally, the maintenance of the `shap` package would be transferred to someone with the necessary skills and time.
As the package is open source, another individual could theoretically fork the library and maintain the fork, allowing it to become the de facto successor of `shap`.
Other packages might also create their own implementations of Shapley values.
This uncertainty surrounding the package nearly prevented me from writing this book.
However, given the widespread reliance on `shap`, it's likely that the package or at least some of its functionality will endure in some form.
As is often the case in open source development, the outcome may depend on a single individual, leading to either a clean situation (a capable person maintains the project) or a messy one (multiple implementations of `shap` emerge).

## How to handle the situation individually

The `shap` package is stable enough for use, and being open source, anyone can contribute to its development.
Ultimately, it's up to you to decide whether to use the original `shap` package, opt for another package implementing Shapley values, or even create your own implementation.

A significant advantage of Shapley values is their clear definition, enabling consistent explanations even when switching implementations.
Differences in implementation should only affect speed and result variance if different estimation algorithms are employed.
While this may impact your application, it hopefully won't be too significant.

## Alternatives to the `shap` library

There are alternative implementations of `shap` and Shapley values available.

In Python:

- [Captum](https://github.com/pytorch/captum)[@kokhlikyan2020captum]: A general model interpretability library that implements KernelShap, Sampling estimator, GradientShap, and Deep Shap.
- [shapley](https://github.com/benedekrozemberczki/shapley)[@rozemberczki2022shapley]: Implements the exact estimator, some linear explanation methods, and Monte Carlo permutation sampling.

Python packages that internally rely on `shap`:

- [DALEX](https://github.com/ModelOriented/DALEX)[@baniecki2021dalex]
- [AIX360](https://github.com/Trusted-AI/AIX360)[@aix360sept2019]
- [InterpretML](https://github.com/interpretml/interpret/)[@nori2019interpretml] covers multiple methods, including shap.
- [OmnixAI](https://github.com/salesforce/OmniXAI)[@wenzhuo2022omnixai], a library for explainable AI
- [shapash](https://github.com/MAIF/shapash) for dashboards and reports, covered in [this chapter](#dashboard).

In R:

- [DALEX](https://github.com/ModelOriented/DALEX)[@biecek2018dalex]
- [kernelshap](https://github.com/ModelOriented/kernelshap)
- [shapr](https://github.com/NorskRegnesentral/shapr)[@Sellereite2019]
- [ShapleyR](https://github.com/redichh/ShapleyR)
- [shapper](https://github.com/ModelOriented/shapper), relying on the Python shap package.
- [shapviz](https://github.com/ModelOriented/shapviz) implements many SHAP plots from the original Python `shap` package and more.
- [treeshap](https://github.com/ModelOriented/treeshap)
- [iml](https://github.com/christophM/iml)[@molnar2018iml]

